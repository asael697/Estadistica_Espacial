SpatialExtremes::dgev(y - theta[5:length(theta)], loc = 0, scale = theta[3],
shape = theta[4], log = TRUE)
))
}
LL  = log_lik(y,post2)
LL[is.finite(LL)] = -6000
loo2 = loo(LL,exp(LL))
log_lik <- function(y,theta) {
t(apply(theta,1,function(theta)
SpatialExtremes::dgev(y - theta[5:length(theta)], loc = 0, scale = theta[3],
shape = theta[4], log = TRUE)
))
}
LL  = log_lik(y,post2)
LL[is.infinite(LL)] = -600
loo2 = loo(LL,exp(LL))
loo2
rm(list = ls())
source("Funciones/functions.R")
library(cowplot)
library(posterior)
library(bayesplot)
library(ggplot2)
library(loo)
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1,meanlog = 1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1,meanlog = 1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = sign(theta[2])*theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],mean = 0,sd = 1,log = TRUE)
d2 = dt(theta[2],df = 5,ncp = 1,log = TRUE) + log(2)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1,1),rnorm(1))
}
set.seed(32494)
start = Sys.time()
post1 = sampling(y = y, scale = 2*diag(3), iter = 2000, warm_up = 5000, thin = 50, h = 0.1,positive = 2)
set.seed(32494)
start = Sys.time()
post1 = sampling(y = y, scale = 2*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2,refresh = 0)
print(Sys.time() - start)
set.seed(32494)
post1 = sampling(y = y, scale = 2*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2,refresh = 0)
colnames(post1) = c("mu","sigma","k","acceptance_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
set.seed(32494)
post1 = sampling(y = y, scale = 2*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.01,
positive = 2,refresh = 0)
colnames(post1) = c("mu","sigma","k","acceptance_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
set.seed(32494)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
colnames(post1) = c("mu","sigma","k","acceptance_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
View(post1)
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = sign(theta[2])*theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 5,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1,1),rnorm(1))
}
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = sign(theta[2])*theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 5,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
set.seed(32494)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = sign(theta[2])*theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 5,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
eff_seed
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
set.seed(6478)
post1 = sampling(y = y, scale = 5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.1,
positive = 2, refresh = 0)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
set.seed(6478)
post1 = sampling(y = y, scale = 5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.01,
positive = 2, refresh = 0)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.01,
positive = 2, refresh = 0)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 5,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.01,
positive = 2, refresh = 0)
summarise_draws(post1_df)
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 3,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000, thin = 1, h = 0.01,
positive = 2, refresh = 0)
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 2000, warm_up = 5000,
h = 0.01, positive = 2, refresh = 0)
summarise_draws(post1_df)
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.01, positive = 2, refresh = 0)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.001, positive = 2, refresh = 0)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1,meanlog = 0.1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 3,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
set.seed(6478)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.001, positive = 2, refresh = 0)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.001, positive = 2, refresh = 0)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.1, positive = 2, refresh = 0)
eff_seed <- sample(1:2^15, 1)
set.seed(25746)
#priors
preal = c(rnorm(1),rlnorm(1,meanlog = 0.1),rnorm(1))
# datos
y = SpatialExtremes::rgev(259,preal[1],scale = preal[2],shape = preal[3])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y,loc = theta[1],scale = theta[2],
shape = theta[3],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],log = TRUE)
d2 = dt(theta[2],df = 3,log = TRUE) + log(2)
d3 = dnorm(theta[3],log = TRUE)
return(d1+d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rnorm(1),rlnorm(1),rnorm(1))
}
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.1, positive = 2, refresh = 0)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 5*diag(3), iter = 5000, warm_up = 5000,
h = 0.1, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.1, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000, warm_up = 5000,
h = 0.01, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 0.5*diag(3), iter = 5000,
h = 0.1, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 5*diag(3), iter = 5000,
h = 0.1, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 5*diag(3), iter = 2000,thin = 5,
h = 0.1, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
post1 = sampling(y = y, scale = 5*diag(3), iter = 2000,thin = 5,
h = 0.01, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
color_scheme_set("viridisC")
y_rep = apply(post1,1,FUN = function(x){
x = as.numeric(x)
SpatialExtremes::rgev(259,loc = x[1],scale = x[2],shape = x[3])
})
s = sample(1:8000,size = 500)
y_rep_try = t(y_rep)[s,]
ppc_dens_overlay(y = y,yrep = y_rep_try)
View(post1)
color_scheme_set("viridisC")
y_rep = apply(post1,1,FUN = function(x){
x = as.numeric(x)
SpatialExtremes::rgev(259,loc = x[3],scale = x[4],shape = x[5])
})
s = sample(1:8000,size = 500)
y_rep_try = t(y_rep)[s,]
ppc_dens_overlay(y = y,yrep = y_rep_try)
eff_seed
set.seed(9564)
post1 = sampling(y = y, scale = 5*diag(3), iter = 2000,thin = 5,
h = 0.01, positive = 2, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","mu","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma","k"))
color_scheme_set("viridisC")
y_rep = apply(post1,1,FUN = function(x){
x = as.numeric(x)
SpatialExtremes::rgev(259,loc = x[3],scale = x[4],shape = x[5])
})
s = sample(1:8000,size = 500)
y_rep_try = t(y_rep)[s,]
ppc_dens_overlay(y = y,yrep = y_rep_try)
log_lik <- function(y,theta) {
t(apply(theta,1,function(theta)
SpatialExtremes::dgev(y,loc = theta[3],scale = theta[4],
shape = theta[5],log = TRUE)
))
}
LL  = log_lik(y,post1)
loo1 = loo(LL, relative_eff(exp(LL)))
loo1
eff_seed <- sample(1:2^15, 1)
set.seed(27482)
n = 259
preal = c(rlnorm(1,meanlog = 0.1),rnorm(1))
y0 = rdlm(n = n, W = 0.1)
y = SpatialExtremes::rgev(n = n,loc = y0$mt[-1],scale = rep(preal[1],n),preal[2])
g1 = plot_ts(y0$mt[-1],name = "mu")
g2 = plot_ts(y, name = "y",color = "darkblue")
cowplot::plot_grid(g1,g2,ncol = 2)
mu_post = ffbs(y,C0 = 100,iter = 1000)
color_scheme_set("teal")
ppc_ribbon(y = y0$mt[-1],yrep = mu_post$ft[, ,1])
loglik <- function(y,theta){
d = SpatialExtremes::dgev(y, loc = 0, scale = theta[1],
shape = theta[2], log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d2 = dt(theta[1],df = 3,log = TRUE) + log(2)
d3 = dnorm(theta[2],sd = 1,log = TRUE)
return(d2+d3)
}
# Generacion de los valores iniciales
inits <- function(){
c(rlnorm(1),rnorm(1))
}
set.seed(12121)
mu_est = apply(mu_post$ft[, ,1],2,mean)
post1 = sampling(y = y - mu_est, scale = 3*diag(2), iter = 5000,
h = 0.005, positive = 1, refresh = 0)
colnames(post1) = c(".chain","acceptance_rate","sigma","k")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
color_scheme_set("viridisB")
mcmc_combo(post1_df,pars = c("sigma","k"))
y_rep = apply(post1,1,FUN = function(x){
x = as.numeric(x)
SpatialExtremes::rgev(259,loc = 0,scale = x[3],shape = x[4]) + mu_est
})
s = sample(1:20000,size = 500)
y_rep_try = t(y_rep)[s,]
color_scheme_set("viridisD")
g1 = ppc_dens_overlay(y = y,yrep = y_rep_try,trim = TRUE)
g2 = ppc_ribbon(y = y,yrep = y_rep_try)
cowplot::plot_grid(g1,g2,ncol = 1)
log_lik <- function(y,theta) {
t(apply(theta,1,function(theta)
SpatialExtremes::dgev(y - mu_est, loc = 0, scale = theta[1],
shape = theta[2], log = TRUE)
))
}
LL  = log_lik(y,post1[,c(3,4)])
loo1 = loo(LL)
loo1
log_lik <- function(y,theta) {
t(apply(theta,1,function(theta)
SpatialExtremes::dgev(y - mu_est, loc = 0, scale = theta[1],
shape = theta[2], log = TRUE)
))
}
LL  = log_lik(y,post1[,c(3,4)])
loo1 = loo(LL, relative_eff(exp(LL)))
loo1
eff_seed <- sample(1:2^15, 1)
set.seed(eff_seed)
dlm_temp = dlm(GG =1, FF = 1, V = 1, W = 1, m0 = 0, C0 = 100)
post2 = sampling(y = y, scale = 3*diag(2),thin = 1, refresh = 0,iter = 1000,
h = 0.005, positive = 1, add_dlm = dlm_temp)
colnames(post2) = c(".chain","acceptance_rate","sigma","k",paste0("mu",1:259))
post2_df = as_draws_df(post2[,1:4])
summarise_draws(post2_df)
color_scheme_set("blue")
mcmc_combo(post2_df,pars = c("sigma","k"))
eff_seed
colnames(post2) = c(".chain","acceptance_rate","sigma","k",paste0("mu",1:259))
post2_df = as_draws_df(post2[,1:4])
summarise_draws(post2_df)
color_scheme_set("blue")
mcmc_combo(post2_df,pars = c("sigma","k"))
y_rep = apply(post2,1,FUN = function(x){
x = as.numeric(x)
n = length(x)
SpatialExtremes::rgev(259,loc = 0,scale = x[3],shape = x[4]) + x[5:n]
})
s = sample(1:4000,size = 500)
y_rep_try = t(y_rep)[s,]
color_scheme_set("viridisE")
g1 = ppc_dens_overlay(y = y,yrep = y_rep_try,trim = TRUE)
g2 = ppc_ribbon(y = y,yrep = y_rep_try)
cowplot::plot_grid(g1,g2,ncol = 1)
log_lik <- function(y,theta) {
t(apply(theta,1,function(theta)
SpatialExtremes::dgev(y - theta[5:length(theta)], loc = 0, scale = theta[3],
shape = theta[4], log = TRUE)
))
}
LL  = log_lik(y,post2)
LL[is.infinite(LL)] = -600
loo2 = loo(LL, relative_eff(exp(LL)))
loo2
rm(list = ls())
