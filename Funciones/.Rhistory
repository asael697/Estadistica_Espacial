mts = matrix(ncol = n,nrow=p)
Cts = array(dim = c(n, p, p))
Bts = array(dim = c(n, p, p))
M_t=matrix(0,ncol=n,nrow=p)
theta_t=matrix(0,ncol=n,nrow=p)
Theta_t_mayus=matrix(0,ncol=n,nrow=p)
h_t=matrix(0,ncol=n,nrow=m)
H_t=matrix(0,ncol=n,nrow=m)
##	ECUACIONES ACTUALIZACION PARA t = 1, ... ,length(Go).
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = data[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:n){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = data[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
# BACKWARD SAMPLING
if(samples == 1){
mu = rep(0,n)
mu[n] = rnorm(1,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t] = rnorm(1,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}else{
#mus = matrix(0,samples,T)
mu <- array(dim = c(n,samples,p))
mu[n,,] = rnorm(samples,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t,,] = rnorm(samples,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}
return(mu)
}
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
setwd("/Users/asael_am/Documents/Estadistica_Espacial/Funciones")
setwd("/Users/asael_am/Documents/Estadistica_Espacial/Funciones")
library(evdbayes)
source("functions.R")
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
ncol(1)
matrix(1)
FFBS <- function(m0 = 0, C0 = 0.6, FF = matirx(1), G = matrix(1), V = 1,
W = 1, data, samples){
if(is.numeric(data)){
data = t(data)
}
n = dim(data)[2]
m = dim(data)[1]
p = ncol(G)
at = matrix(ncol = n, nrow = p)
Rt = array(dim = c(n, p, p))
ft = matrix(ncol = n, nrow = m)
Qt = matrix(ncol = n, nrow = m)
Ct = array(dim = c(n, p, p))
mt = matrix(ncol = n, nrow = p)
et = matrix(ncol = n, nrow = m)
At = array(dim = c(n, p, m))
mts = matrix(ncol = n,nrow=p)
Cts = array(dim = c(n, p, p))
Bts = array(dim = c(n, p, p))
M_t=matrix(0,ncol=n,nrow=p)
theta_t=matrix(0,ncol=n,nrow=p)
Theta_t_mayus=matrix(0,ncol=n,nrow=p)
h_t=matrix(0,ncol=n,nrow=m)
H_t=matrix(0,ncol=n,nrow=m)
##	ECUACIONES ACTUALIZACION PARA t = 1, ... ,length(Go).
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = data[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:n){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = data[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
# BACKWARD SAMPLING
if(samples == 1){
mu = rep(0,n)
mu[n] = rnorm(1,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t] = rnorm(1,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}else{
#mus = matrix(0,samples,T)
mu <- array(dim = c(n,samples,p))
mu[n,,] = rnorm(samples,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t,,] = rnorm(samples,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}
return(mu)
}
setwd("/Users/asael_am/Documents/Estadistica_Espacial/Funciones")
library(evdbayes)
source("functions.R")
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
m0 = 0; C0 = 0.6; FF = matirx(1); G = matrix(1); V = 1
W = 1; data =y; samples =1
if(is.numeric(data)){
data = t(data)
}
n = dim(data)[2]
m = dim(data)[1]
p = ncol(G)
G
ncol(G)
setwd("/Users/asael_am/Documents/Estadistica_Espacial/Funciones")
library(evdbayes)
source("functions.R")
m0 = 0; C0 = 0.6; FF = matrix(1); G = matrix(1); V = 1
W = 1; data = y; samples =1
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
if(is.numeric(data)){
data = t(data)
}
n = dim(data)[2]
m = dim(data)[1]
p = length(m0)
at = matrix(ncol = n, nrow = p)
Rt = array(dim = c(n, p, p))
ft = matrix(ncol = n, nrow = m)
Qt = matrix(ncol = n, nrow = m)
Ct = array(dim = c(n, p, p))
mt = matrix(ncol = n, nrow = p)
et = matrix(ncol = n, nrow = m)
At = array(dim = c(n, p, m))
mts = matrix(ncol = n,nrow=p)
Cts = array(dim = c(n, p, p))
Bts = array(dim = c(n, p, p))
theta_t = matrix(0,ncol = n, nrow = p)
Theta_t_mayus = matrix(0, ncol = n, nrow = p)
h_t = matrix(0, ncol = n,nrow = m)
H_t = matrix(0, ncol = n, nrow = m)
##	ECUACIONES ACTUALIZACION PARA t = 1, ... ,length(Go).
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = data[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:n){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = data[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
M_t = matrix(0,ncol = n, nrow = p)
theta_t = matrix(0,ncol = n, nrow = p)
Theta_t_mayus = matrix(0, ncol = n, nrow = p)
h_t = matrix(0, ncol = n,nrow = m)
H_t = matrix(0, ncol = n, nrow = m)
##	ECUACIONES ACTUALIZACION PARA t = 1, ... ,length(Go).
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = data[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:n){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = data[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
setwd("/Users/asael_am/Documents/Estadistica_Espacial/Funciones")
library(evdbayes)
source("functions.R")
mu_dlm<-FFBS(m0= 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
FFBS <- function(m0 = 0, C0 = 0.6, FF = 1, G = 1), V = 1,
FFBS <- function(m0 = 0, C0 = 0.6, FF = 1, G = 1, V = 1,
W = 1, data, samples){
if(is.numeric(data)){
data = t(data)
}
T = dim(data)[2]
n = dim(data)[1]
p = length(m0)
at = matrix(ncol = T, nrow = p)
Rt = array(dim = c(T, p, p))
ft = matrix(ncol = T, nrow = n)
Qt = matrix(ncol = T, nrow = n)
Ct = array(dim = c(T, p, p))
mt = matrix(ncol = T, nrow = p)
et = matrix(ncol = T, nrow = n)
At = array(dim = c(T, p, n))
mts = matrix(ncol = T,nrow = p)
Cts = array(dim = c(T, p, p))
Bts = array(dim=c(T, p, p))
M_t =matrix(0,ncol=T,nrow=p)
theta_t =matrix(0, ncol = T, nrow = p)
Theta_t_mayus = matrix(0, ncol = T, nrow = p)
h_t = matrix(0, ncol = T, nrow = n)
H_t = matrix(0, ncol = T, nrow = n)
##	ECUACIONES ACTUALIZACION PARA t = 1, ... ,length(Go).
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = data[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:T){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = data[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
# BACKWARD SAMPLING
if(samples == 1){
mu = rep(0,n)
mu[n] = rnorm(1,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t] = rnorm(1,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}else{
#mus = matrix(0,samples,T)
mu <- array(dim = c(n,samples,p))
mu[n,,] = rnorm(samples,at[,n],sqrt(Ct[n,,]))
for (t in (n-1):1) {
mu[t,,] = rnorm(samples,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}
return(mu)
}
mu_dlm<-FFBS(m0 = 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,
data = t(Go), sample = 1)
DLMG=function(m0,C0,FF,G,V,W,T,n,p,Xt,muestra){
#m0=0;C0=0.6;FF=1;G=1;V=1;W=1;T=length(Go);n=1;p=1;Xt=t(Go);
at=matrix(ncol=T,nrow=p)
Rt=array(dim=c(T,p,p))
ft=matrix(ncol=T,nrow=n)
Qt=matrix(ncol=T,nrow=n)
Ct=array(dim=c(T,p,p))
mt=matrix(ncol=T,nrow=p)
et=matrix(ncol=T,nrow=n)
At=array(dim=c(T,p,n))
mts=matrix(ncol=T,nrow=p)
Cts=array(dim=c(T,p,p))
Bts=array(dim=c(T,p,p))
#  theta=matrix(ncol=T,nrow=p)
##	ECUACIONES ACTUALIZACION PARA t=1, ... ,length(Go).
##t=1
M_t=matrix(0,ncol=T,nrow=p)
theta_t=matrix(0,ncol=T,nrow=p)
Theta_t_mayus=matrix(0,ncol=T,nrow=p)
h_t=matrix(0,ncol=T,nrow=n)
H_t=matrix(0,ncol=T,nrow=n)
#Theta_t_mayus=matrix(0,ncol=T,nrow=p)
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = Xt[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:T){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = Xt[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
#BACKWAR SAMPLIN
if(muestra==1){
mus = rep(0,T)
mus[T] = rnorm(1,at[,T],sqrt(Ct[T,,]))
for (t in (T-1):1) {
mus[t]=rnorm(1,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}else{
#mus = matrix(0,muestra,T)
mus=array(dim=c(T,muestra,p))
mus[T,,]=rnorm(muestra,at[,T],sqrt(Ct[T,,]))
for (t in (T-1):1) {
mus[t,,]=rnorm(muestra,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}
#list(mus=mus,M_t=M_t)
return(mus)
##list(theta_t = theta_t , M_t = M_t , Theta_t_mayus = Theta_t_mayus)
##list(ft=ft,Qt=Qt,mt=mt,Ct=Ct,At=At,et=et,at=at,Rt=Rt)
}
mu_dlm<-DLMG(m0 = 0, C0 = 0.6,FF = 1,G = 1,V = 1,W = 1,T = length(y),
n = 1, p = 1,Xt=t(y), muestra = 1)
mu_dlm
length(mu_dlm)
DLMG <- function(m0, C0, FF, G, V, W, Xt, muestra){
if(is.numeric(data)){
data = t(data)
}
T = dim(data)[2]
n = dim(data)[1]
p = length(m0)
at = matrix(ncol=T,nrow=p)
Rt = array(dim=c(T,p,p))
ft = matrix(ncol=T,nrow=n)
Qt = matrix(ncol=T,nrow=n)
Ct = array(dim=c(T,p,p))
mt = matrix(ncol=T,nrow=p)
et = matrix(ncol=T,nrow=n)
At = array(dim=c(T,p,n))
mts = matrix(ncol=T,nrow=p)
Cts = array(dim=c(T,p,p))
Bts = array(dim=c(T,p,p))
M_t = matrix(0,ncol=T,nrow=p)
theta_t = matrix(0,ncol=T,nrow=p)
Theta_t_mayus = matrix(0,ncol=T,nrow=p)
h_t = matrix(0,ncol=T,nrow=n)
H_t = matrix(0,ncol=T,nrow=n)
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = Xt[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#Forward Filtering
for(t in 2:T){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = Xt[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
#Backward Sampling
if(muestra == 1){
mu = rep(0,T)
mu[T] = rnorm(1,at[,T],sqrt(Ct[T,,]))
for (t in (T-1):1) {
mu[t] = rnorm(1,h_t[,t+1],sqrt(H_t[,t+1]))
}
}else{
#mus = matrix(0,muestra,T)
mu = array(dim = c(T, muestra, p))
mu[T,,] = rnorm(muestra, at[,T], sqrt(Ct[T,,]))
for (t in (T-1):1) {
mu[t,,] = rnorm(muestra,h_t[,t+1],sqrt(H_t[,t+1]))
}
}
return(mu)
}
DLMG=function(m0,C0,FF,G,V,W,T,n,p,Xt,muestra){
#m0=0;C0=0.6;FF=1;G=1;V=1;W=1;T=length(Go);n=1;p=1;Xt=t(Go);
at=matrix(ncol=T,nrow=p)
Rt=array(dim=c(T,p,p))
ft=matrix(ncol=T,nrow=n)
Qt=matrix(ncol=T,nrow=n)
Ct=array(dim=c(T,p,p))
mt=matrix(ncol=T,nrow=p)
et=matrix(ncol=T,nrow=n)
At=array(dim=c(T,p,n))
mts=matrix(ncol=T,nrow=p)
Cts=array(dim=c(T,p,p))
Bts=array(dim=c(T,p,p))
#  theta=matrix(ncol=T,nrow=p)
##	ECUACIONES ACTUALIZACION PARA t=1, ... ,length(Go).
##t=1
M_t=matrix(0,ncol=T,nrow=p)
theta_t=matrix(0,ncol=T,nrow=p)
Theta_t_mayus=matrix(0,ncol=T,nrow=p)
h_t=matrix(0,ncol=T,nrow=n)
H_t=matrix(0,ncol=T,nrow=n)
#Theta_t_mayus=matrix(0,ncol=T,nrow=p)
at[,1] = G%*%m0
Rt[1,,] = (G%*%C0%*%t(G))+W
ft[,1] = FF%*%at[,1]
Qt[,1] = FF%*%Rt[1,,]%*%t(FF) + V
At[1,,] = Rt[1,,]%*%t(FF)%*%solve(Qt[,1])
et[,1] = Xt[,1] - ft[,1]
mt[,1] = at[,1] + At[1,,]%*%t(et[,1])
Ct[1,,] = Rt[1,,] - At[1,,]%*%t(Qt[1,1])%*%t(At[1,,])
#forward Filter
for(t in 2:T){
at[,t] = G%*%mt[,t-1]
Rt[t,,] = (G%*%Ct[t-1,,]%*%t(G)) + W
ft[,t] = FF%*%at[,t]
Qt[,t] = FF%*%Rt[t,,]%*%t(FF) + V
At[t,,] = Rt[t,,]%*%t(FF)%*%solve(Qt[,t])
et[,t] = Xt[,t] - ft[,t]
mt[,t] = at[,t] + At[t,,]%*%t(et[,t])
Ct[t,,] = Rt[t,,] - At[t,,]%*%t(Qt[,t])%*%t(At[t,,])
theta_t[,t] = rnorm(1 , mean =at[,t], sd = sqrt(Rt[t,,]))
M_t[,t] = rnorm(1, mean = ft[,t] , sd = sqrt(Qt[,t]))
Theta_t_mayus[,t] = rnorm(1 , mean = M_t[,t] , sd = sqrt(Ct[t,,]))
H_t[,t] = solve(solve(Ct[t,,])+t(G)%*%solve(W)%*%G)
h_t[,t] = H_t[,t]%*%(solve(Ct[t,,])%*%mt[,t] + t(G)%*%solve(W)%*%M_t[,t])
}
#BACKWAR SAMPLIN
if(muestra==1){
mus = rep(0,T)
mus[T] = rnorm(1,at[,T],sqrt(Ct[T,,]))
for (t in (T-1):1) {
mus[t]=rnorm(1,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}else{
#mus = matrix(0,muestra,T)
mus=array(dim=c(T,muestra,p))
mus[T,,]=rnorm(muestra,at[,T],sqrt(Ct[T,,]))
for (t in (T-1):1) {
mus[t,,]=rnorm(muestra,h_t[,(t+1)],sqrt(H_t[,(t+1)]))
}
}
#list(mus=mus,M_t=M_t)
return(mus)
##list(theta_t = theta_t , M_t = M_t , Theta_t_mayus = Theta_t_mayus)
##list(ft=ft,Qt=Qt,mt=mt,Ct=Ct,At=At,et=et,at=at,Rt=Rt)
}
test<-rnorm(1000,mean=0,sd=1)
Go<-test
tam<-length(Go)
mu_dlm<-mean(DLMG(m0=0,C0=0.6,FF=1,G=1,V=1,W=1,T=tam,n=1,p=1,Xt=t(Go),muestra=1))
mu_dlm<-DLMG(m0=0,C0=0.6,FF=1,G=1,V=1,W=1,T=tam,n=1,p=1,Xt=t(Go),muestra=1)
mu_dlm
mu_dlm<-DLMG(m0 = c(0,0),C0 = 0.6*diag(2),
FF = c(1,1),G = diag(2),V = 1,W = diag(1),T = tam, n = 1,p = 2,
Xt = t(Go), muestra=1)
mu_dlm<-DLMG(m0 = c(0,0),C0 = 0.6*diag(2),
FF = c(1,1),G = diag(2),V = 1,W = diag(2),T = tam, n = 1,p = 2,
Xt = t(Go), muestra = 1)
