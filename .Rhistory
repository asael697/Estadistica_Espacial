d2 = dgamma(theta[2],5,2.5,log = TRUE)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function( ){
c(rnorm(1),abs(rnorm(1))+0.001)
}
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
#priors
preal = c(rnorm(1),rgamma(1,5,2.5))
# datos
y = rnorm(n = 250,mean = preal[1], sd = preal[2])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = dnorm(y,mean = theta[1], sd = theta[2],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],mean = 0,sd = 1,log = TRUE)
d2 = dgamma(theta[2],5,2.5,log = TRUE)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function( ){
c(rnorm(1),abs(rnorm(1))+0.001)
}
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
library(cowplot)
library(posterior)
library(bayesplot)
library(ggplot2)
library(loo)
#priors
preal = c(rnorm(1),rgamma(1,5,2.5))
# datos
y = rnorm(n = 250,mean = preal[1], sd = preal[2])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = dnorm(y,mean = theta[1], sd = theta[2],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],mean = 0,sd = 1,log = TRUE)
d2 = dgamma(theta[2],5,2.5,log = TRUE)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function( ){
c(rnorm(1),abs(rnorm(1))+0.001)
}
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
library(cowplot)
library(posterior)
library(bayesplot)
library(ggplot2)
library(loo)
#priors
preal = c(rnorm(1),rgamma(1,5,2.5))
# datos
y = rnorm(n = 250,mean = preal[1], sd = preal[2])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = dnorm(y,mean = theta[1], sd = theta[2],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],mean = 0,sd = 1,log = TRUE)
d2 = dgamma(theta[2],5,2.5,log = TRUE)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function( ){
c(rnorm(1),abs(rnorm(1))+0.001)
}
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 2,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
prop = inits()
scale = scale_mat
d = length(prop)
t_prop = function(par) target(y,par)
opt = optim(prop,fn =  function(par) -target(y,par))$par
(opt = optim(prop,fn =  function(par) -target(y,par))$par)
scale = chol2inv(chol(numDeriv::hessian(t_prop,x = opt)))
numDeriv::hessian(t_prop,x = opt
)
scale = chol2inv(chol(-numDeriv::hessian(t_prop,x = opt)))
scale
prop = scale %*% numDeriv::grad(t_prop,x = opt)
prop = opt + as.numeric(prop)
(prop = opt + as.numeric(prop))
prop = inits()
scale = scale_mat
d = length(prop)
t_prop = function(par) target(y,par)
(opt = optim(prop,fn =  function(par) -target(y,par))$par)
(scale = chol2inv(chol(-numDeriv::hessian(t_prop,x = opt))) )
prop = scale %*% numDeriv::grad(t_prop,x = opt)
(prop = opt + as.numeric(prop))
diag(scale)
prop = inits()
scale = scale_mat
d = length(prop)
t_prop = function(par) target(y,par)
(opt = optim(prop,fn =  function(par) -target(y,par))$par)
(scale = chol2inv(chol(-numDeriv::hessian(t_prop,x = opt))) )
prop = scale %*% numDeriv::grad(t_prop,x = opt)
(prop = opt + as.numeric(prop))
prop = inits()
scale = scale_mat
prop = rnorm(2)
scale = scale_mat
proposed = rnorm(2)
d = length(proposed)
z = scale%*%(proposed - prop)
d2 = dnorm(z,log = TRUE)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(t(proposed),mean = prop,sigma = scale)
mvtnorm::dmvnorm(t(proposed),mean = prop,sigma = scale,log = TRUE)
z = t(scale)%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(t(proposed),mean = prop,sigma = scale,log = TRUE)
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = rnorm(2)
prop = c(1,1)
prop = c(1,1)
scale = 2*diag(2)
proposed = rnorm(2)
z = t(scale)%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
proposed = rnorm(2)
z = t(scale)%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = c(0,0)
scale = diag(2)
proposed = rnorm(2)
z = t(scale)%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
scale = 2*diag(2)
proposed = rnorm(2)
z = t(scale)%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
z
z = t( chol(scale) )%*%(proposed - prop)
sum(dnorm(z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
z
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = c(0,0)
scale = 2*diag(2)
proposed = rnorm(2)
z = t( chol(scale) )%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = c(0,0)
scale = 2*diag(2)
proposed = rnorm(2)
z = t( chol(scale) )%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = c(0,0)
scale = 10*diag(2)
proposed = rnorm(2)
z = t( chol(scale) )%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
z = chol(scale)%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
prop = c(0,0)
scale = 10*diag(2)
proposed = rnorm(2)
z = chol(scale)%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-(proposed - prop)%*%solve(scale)%*%(proposed - prop)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) = log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - log(det(scale))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
solve(scale)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
det(diag(2))
log(1)
z = chol(scale)%*%(proposed - prop)
z
-sum(z*z)
z = chol(scale)%*%(proposed - prop)
z
chol(scale)
z = chol(scale)%*%(proposed - prop)
z
z = chol(scale)%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)
-(proposed - prop)
z = chol(scale)%*%(proposed - prop)
z
t(z)
-t(z)%*%z
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop)
prop = c(0,0)
scale = 10*diag(2)
proposed = rnorm(2)
z = chol(scale)%*%(proposed - prop)
z
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(z)%*%z
chol(scale)
solev(chol(scale))
solve(chol(scale))
solve(chol(scale))%*%solve(chol(scale))
chol(scale) %*% t(chol(scale))
t(chol(scale))%*%chol(scale)
chol2inv(scale)
z = chol(scale)%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(z)%*%z
z = solve(chol(scale))%*%(proposed - prop)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
z = solve(chol(scale))%*%(proposed - prop)
z
-t(z)%*%z = log(2*pi)
-t(z)%*%z - log(2*pi)
z = solve(chol(scale))%*%(proposed - prop)
-t(z)%*%z - log(2*pi)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
solve(chol(scale))
solve(chol(scale))%*%solve(chol(scale))
z = t(solve(chol(scale)))%*%(proposed - prop)
-t(z)%*%z - log(2*pi)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - 0.5log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - 0.5*log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
det(scale)
sqtr(10)
sqrt(10)
log(3.16)
z = solve(chol(scale))%*%(proposed - prop)
-t(z)%*%z - log(2*pi)
sum(dnorm( as.numeric(z),log = TRUE))
z
proposed/sqrt(10)
sum(dnorm( as.numeric(z),log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-0.5*t(z)%*%z - log(2*pi)
-2*t(z)%*%z - log(2*pi)
dnorm( sum(as.numeric(z)),log = TRUE)
-t(z)%*%z/2 - log(2*pi)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop)/2 - log(2*pi) - 0.5*log(det(scale))
solve(scale)
proposed - prop
-0.5*t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
0.5*log(det(scale))
dnorm( sum(as.numeric(z)),log = TRUE)
z = solve(chol(scale))%*%(proposed - prop)
-t(z)%*%z/2 - log(2*pi)
dnorm( sum(as.numeric(z)),log = TRUE)
dnorm( z,log = TRUE)
sum(dnorm( z,log = TRUE))
z = solve(chol(scale))%*%(proposed - prop)
-t(z)%*%z/2 - log(2*pi)
sum(dnorm( z,log = TRUE))
mvtnorm::dmvnorm(proposed,mean = prop,sigma = scale,log = TRUE)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi) - 0.5*log(det(scale))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi)
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop)
- log(2*pi)
-t(z)%*%z/2 - log(2*pi)
sum(dnorm(z,log = TRUE))
-t(proposed - prop)%*%solve(scale)%*%(proposed - prop) - log(2*pi)
source("Funciones/functions.R")
library(cowplot)
library(posterior)
library(bayesplot)
library(ggplot2)
library(loo)
#priors
preal = c(rnorm(1),rgamma(1,5,2.5))
# datos
y = rnorm(n = 250,mean = preal[1], sd = preal[2])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
rm(list = ls())
source("Funciones/functions.R")
library(cowplot)
library(posterior)
library(bayesplot)
library(ggplot2)
library(loo)
#priors
preal = c(rnorm(1),rgamma(1,5,2.5))
# datos
y = rnorm(n = 250,mean = preal[1], sd = preal[2])
ggplot(data.frame(y),aes(x = y))+geom_density(fill = "darkred")+
labs(x = "y",y = "conteo",title = "Histograma de los datos simulados y")
# Estimacion de la log-verosimilitud
loglik <- function(y,theta){
d = dnorm(y,mean = theta[1], sd = theta[2],log = TRUE)
return(sum(d))
}
# Calculo de la log prior logP(theta)
log_prior <- function(theta){
d1 = dnorm(theta[1],mean = 0,sd = 1,log = TRUE)
d2 = dgamma(theta[2],5,2.5,log = TRUE)
return(d1+d2)
}
# Generacion de los valores iniciales
inits <- function( ){
c(rnorm(1),abs(rnorm(1))+0.001)
}
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 2,dif_adjust = FALSE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 2)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = TRUE)
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 5000,thin = 1,dif_adjust = TRUE)
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 500,thin = 1,dif_adjust = TRUE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
post1 = sampling(y = y, scale = scale_mat, iter = 1000,thin = 1,dif_adjust = TRUE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 1000,thin = 2,dif_adjust = TRUE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 1000,thin = 2)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
scale_mat =  0.5*diag(2)
post1 = sampling(y = y, scale = scale_mat, iter = 1000,thin = 2,mala = TRUE)
colnames(post1) = c("mu","sigma","reject_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
prop = inits()
(prop = inits())
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
(prop = inits())
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
(prop = inits())
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
(prop = inits())
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
t_prop = function(par) target(y,par)
prop = prop + as.numeric(scale %*% numDeriv::grad(t_prop,x = prop))
prop = prop + as.numeric(scale_mat %*% numDeriv::grad(t_prop,x = prop))
prop
scale_mat
numDeriv::grad(t_prop,x = prop)
numDeriv::grad(function(x) loglik(y,x),x = prop)
numDeriv::grad(function(x) target(y,x),x = prop)
numDeriv::grad(function(x) log_prior(x),x = prop)
dnorm(prop[1],log = TRUE)
dgamma(prop[1],5,2.5,log = TRUE)
numDeriv::grad(function(x) log_prior(x),x = prop)
numDeriv::grad(function(x) dnorm(x,log = T),x = prop)
numDeriv::grad(function(x) dnorm(x,log = T),x = prop[1])
prop
prop = inits()
prop
t_prop = function(par) target(y,par)
numDeriv::grad(t_prop,x = prop)
numDeriv::grad(function(x) loglik(y,x),x = prop)
numDeriv::grad(function(x) loglik(y,x),x = prop)*0.5
prop + as.numeric(scale %*% numDeriv::grad(t_prop,x = prop))
prop + as.numeric(scale_mat %*% numDeriv::grad(t_prop,x = prop))
prop = prop + as.numeric(scale %*% numDeriv::grad(t_prop,x = prop))
scale = 2*scale
scale
scale = 0.5*diag(2)
scale_alpha_datetime()
scale = 0.5*diag(2)
scale
prop = prop + as.numeric(scale %*% numDeriv::grad(t_prop,x = prop))
scale = 2*scale
prop
scale
x  = rnorm(2,mean = prop)
x
mvtnorm::dmvnorm(x,mean = prop)
mvtnorm::dmvnorm(x,mean = prop,log = TRUE)
djump(x,prop = prop,scale = scale)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
step(y,prop = inits(),scale = scale_mat,mala = TRUE)
prop = inits()
reject = 1
mala = TRUE
(ls = diff_adjustment(prop, scale,mala))
scale
scale = 0.3*diag(2)
reject = 1
ls = diff_adjustment(prop, scale, dif_adjust,mala)
dif_adjust = FALSE
reject = 1
(ls = diff_adjustment(prop, scale, dif_adjust,mala))
proposed = rjump(prop = ls$prop, scale = ls$scale)
proposed
u  =  runif(1)
u
t1 = target(y, proposed) + Hastings*djump(prop, ls$prop, ls$scale)
Hastings = TRUE
t1 = target(y, proposed) + Hastings*djump(prop, ls$prop, ls$scale)
t1
t2 = target(y, prop) + Hastings*djump(proposed, ls$prop, ls$scale)
t2
et = exp(t1 - t2)
et
accept_prob = min(1,et)
u <= accept_prob
djump(proposed, ls$prop, ls$scale)
target(y, prop)
target(y, proposed)
djump(prop, ls$prop, ls$scale)
rm(list = ls())
