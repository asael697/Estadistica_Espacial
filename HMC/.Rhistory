hi =  yhat + 2*sigma
data = data.frame(time = mcycle$times,y = mcycle$accel)
data$yhat = yhat; data$low = low; data$hi = hi
colors = c("yhat" = "#0000CC", "y" = "#000000")
ggplot2::ggplot(ggplot2::aes(x = time,y = yhat),data = data)+
ggplot2::geom_line(ggplot2::aes(y = yhat,color = "yhat"))+
ggplot2::geom_point(ggplot2::aes(y = y,color = "y"))+
ggplot2::geom_smooth(ggplot2::aes(ymin = low, ymax = hi),fill="#333333", color="#0000CC",
stat = "identity",size = 0.5)+
ggplot2::labs(x = "time",color = "Legend") +
ggplot2::scale_color_manual(values = colors)+
labs(x="Time (ms)", y="Acceleration (g)",title = "Fitted values GP")
f  = m1$draws(variables = 'f')
yhat = colMeans(colMeans(f))
sigma = mean(as.numeric(colMeans( m1$draws(variables = 'sigma_r'))))
low = yhat - 2*sigma
hi =  yhat + 2*sigma
data = data.frame(time = mcycle$times,y = mcycle$accel)
data$yhat = yhat; data$low = low; data$hi = hi
colors = c("yhat" = "#0000CC", "y" = "#000000")
ggplot2::ggplot(ggplot2::aes(x = time,y = yhat),data = data)+
ggplot2::geom_line(ggplot2::aes(y = yhat,color = "yhat"))+
ggplot2::geom_point(ggplot2::aes(y = y,color = "y"))+
ggplot2::geom_smooth(ggplot2::aes(ymin = low, ymax = hi),fill="#333333", color="#0000CC",
stat = "identity",size = 0.5)+
ggplot2::labs(x = "time",color = "Legend") +
ggplot2::scale_color_manual(values = colors)+
labs(x="Time (ms)", y="Acceleration (g)",
title = "Posterior predictive checks",
subtitle = "Gaussian process model")
beta = 2
spend = rnorm(29,mu = 3)
saturation = 1.5
k_seasonal = 1.2
spend = 4
mu = 2
concentration = 0.8
hill = function(x,k) (x*k)/(x+k)
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * hill(spend, saturation * k_seasonal)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
ts.plot(effect_of_spend )
ts.plot(effect_of_spend)
effect_of_spend
k1 - saturation*k_seasonal
k1 = saturation*k_seasonal
effect_of_spend = beta * (spend*k1)/(spend + k1)
ts.plot(effect_of_spend)
effect_of_spend = beta * (spend*k1)/(spend + k1)
effect_of_spend
spend = rnorm(29,mu = 3)
spend = rnorm(29,mean= 3)
effect_of_spend = beta * (spend*k1)/(spend + k1)
ts.plot(effect_of_spend)
beta = 2
spend = rnorm(29,mean= 3)
saturation = 1.5
k_seasonal = 1.2
spend = 4
mu = 2
concentration = 0.8
hill = function(x,k) (x*k)/(x+k)
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(effect_of_spend)
effect_of_spend
k1 = saturation*k_seasonal
k1
effect_of_spend = beta * (spend*k1)/(spend + k1)
effect_of_spend
spend+k1
spend = rnorm(29,mean= 3)
spend
spend+k1
beta * (spend*k1)/(spend + k1)
beta = 2
spend = rnorm(29,mean= 3)
saturation = 1.5
k_seasonal = 1.2
mu = 2
concentration = 0.8
hill = function(x,k) (x*k)/(x+k)
k1 = saturation*k_seasonal
k1
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(effect_of_spend)
ts.plot(shifted_effect_of_spend)
shift_weights
effect_of_spend
effect_of_spend * shift_weights
spend = rnorm(30,mean= 3)
k1
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
ts.plot(effect_of_spend)
ts.plot(shifted_effect_of_spend)
concentration = 0.5
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
concentration = 0.3
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
concentration =2.5
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
concentration = 10
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = effect_of_spend * shift_weights
ts.plot(shifted_effect_of_spend)
ts.plot(effect_of_spend)
effect_of_spend
effect_of_spend * shift_weights
shift_weights
2.408715*1.615056e-01
beta = 2
spend = rnorm(30,mean= 3)
saturation = 1.5
k_seasonal = 1.2
mu = 2
concentration = 10
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = dnbinom(0:29, mu = effect_of_spend, size = concentration)
ts.plot(shifted_effect_of_spend)
beta = 2
spend = rnorm(30,mean= 3)
saturation = 1.5
k_seasonal = 1.2
mu = 2
concentration = 0.8
k1 = saturation*k_seasonal
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * (spend*k1)/(spend + k1)
shifted_effect_of_spend = dnbinom(0:29, mu = effect_of_spend, size = concentration)
ts.plot(shifted_effect_of_spend)
?convolve
rev(shift_weights
)
?rev
shift_weights
shifted_effect_of_spend = convolve(effect_of_spend, rev(shift_weights), type = 'open')
ts.plot(shifted_effect_of_spend)
beta = 2
spend = rnorm(30,3)
saturation = 1.5
k_seasonal = 1.2
mu = 2
concentration = 0.8
hill = function(x,k) (x*k)/(x+k)
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta * hill(spend, saturation * k_seasonal)
shifted_effect_of_spend = convolve(effect_of_spend, rev(shift_weights), type = 'open')
ts.plot(shifted_effect_of_spend)
matrix_convolution = matrix(0, 30, 30)
for(i in 1:30) matrix_convolution[,i] = c(rep(0, i-1), shift_weights[1:(30-i+1)])
shifted_effect_of_spend2 = matrix_convolution %*% effect_of_spend
ts.plot(shifted_effect_of_spend2)
ts.plot(shifted_effect_of_spend)
matrix_convolution
ts.plot(shifted_effect_of_spend)
sum(shift_weights)
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
sum(shift_weights)
?dnbinom
ts.plot(shifted_effect_of_spend)
beta = 2
spend = rnorm(30,3)
saturation = 1.5
k_seasonal = 1.2
mu = 2
concentration = 0.8
hill = function(x,k) (x*k)/(x+k)
shift_weights = dnbinom(0:29, mu = mu, size = concentration)
effect_of_spend = beta*hill(spend, saturation * k_seasonal)
shifted_effect_of_spend = convolve(effect_of_spend, rev(shift_weights), type = 'open')
ts.plot(shifted_effect_of_spend)
ts.plot(shifted_effect_of_spend,xlab = "Shiffted effect")
ts.plot(shifted_effect_of_spend)
sigma = rgamma(1,shape = 5,6)
sigma = rgamma(1,shape = 5,scale = 6)
sigma = rgamma(1000,shape = 5,scale = 6)
hist(sigma)
hist(sigma,breaks = 60)
sigma = rgamma(1000,shape = 3,scale = 6)
hist(sigma,breaks = 60)
sigma = rgamma(1000,shape = 0.4,scale = 6)
hist(sigma,breaks = 60)
sigma = rgamma(1000,shape = 1,scale = 6)
hist(sigma,breaks = 60)
error = rnorm(1,sd = sqrt(sigma))
depvar = rep(0,256)
depvar[1] = rnorm(1,sd = sqrt(sigma))
n = 250
# prior
sigma = rgamma(1,shape = 1,scale = 6)
depvar = rep(0,n)
error = rnorm(n,sd = sqrt(sigma))
depvar[1] = error[1]
for(i in 2:n) depvar[i] = depvar[i-1] + error[i]
ts.plot(depvar)
sigma
ts.plot(rw(n,sigma))
n = 250
# prior
sigma = rgamma(1,shape = 1,scale = 6)
rw = function(n,sigma = 1){
depvar = rep(0,n)
error = rnorm(n,sd = sqrt(sigma))
depvar[1] = error[1]
for(i in 2:n) depvar[i] = depvar[i-1] + error[i]
return(depvar)
}
ts.plot(rw(n,sigma))
y = rw(n,sigma = sigma)
y
ts.plot(y)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
install.packages("magrittr")
library(magrittr)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
Y = rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
Y = rnorm(200) %>%
matrix(ncol = 2) %T>%
colSums
Y = rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
Y = rnorm(200) %>%
matrix(ncol = 2)
colSums(Y)
Y = rnorm(200) %>%
matrix(ncol = 2) %T>%
colSums
Y = rnorm(200) %>%
matrix(ncol = 2) %T>%
colSums()
Y = rnorm(200) %>%
matrix(ncol = 2) %>%
colSums()
data.frame(z = rnorm(100)) %$%
ts.plot(z)
data.frame(z = rnorm(100)) %>%
ts.plot(z)
data.frame(z = rnorm(100)) %>%
ts.plot(z)
data.frame(z = rnorm(100)) %$%
ts.plot(z)
y[2:n]
n = 250
# prior
sigma = rgamma(1,shape = 1,scale = 6)
error = rnorm(n,sd = sqrt(sigma))
n = 250
# prior
sigma = rgamma(1,shape = 1,scale = 6)
error = rnorm(n,sd = sqrt(sigma))
rw = function(n,sigma = 1,error){
depvar = rep(0,n)
depvar[1] = error[1]
for(i in 2:n) depvar[i] = depvar[i-1] + error[i]
return(depvar)
}
y = rw(n,sigma = sigma)
y = rw(n,sigma = sigma,error)
y1 = rep(n,0)
y1 = rep(0,n)
y1
y1[1] = error[1]
y[2:n] = y[1:(n-1)] + error[2:n]
y = rw(n,sigma = sigma,error)
y1 = rep(0,n)
y1[1] = error[1]
y1[2:n] = y1[1:(n-1)] + error[2:n]
y1 = y
y1 = rep(0,n)
y1[1] = error[1]
y1[2:n] = y1[1:(n-1)] + error[2:n]
y1 == y
y[1:(n-1)]
head(y[1:(n-1)])
head(y[2:n])
n = 250
# prior
sigma = rgamma(1,shape = 1,scale = 6)
error = rnorm(n,sd = sqrt(sigma))
rw = function(n,sigma = 1,error){
depvar = rep(0,n)
depvar[1] = error[1]
for(i in 2:n) depvar[i] = depvar[i-1] + error[i]
return(depvar)
}
y = rw(n,sigma = sigma,error)
y1 = rep(0,n)
y1[1] = error[1]
y1[2:n] = y1[1:(n-1)] + error[2:n]
y1 == y
ts.plot(y1)
ts.plot(y)
ts.plot(y1)
# prior
sigma = rgamma(1,shape = 1,scale = 6)
rw = function(n,sigma = 1,){
rw = function(n,sigma = 1){
depvar = rep(0,n)
depvar[1] =  rnorm(1,sd = sqrt(sigma))
for(i in 2:n) depvar[i] = depvar[i-1] +  rnorm(1,sd = sqrt(sigma))
return(depvar)
}
y = rw(n,sigma = sigma,error)
ts.plot(y)
#y = ax + b + error
a = 4
b = 3
e = rnorm(100)
x = rnorm(100)
y = rnorm(n = 100,mean = a*x + b + e,sd = 3)
plot(x,y)
lm(y,x)
dat = data.frame(x,y)
lm(y~x,data = dat)
plot(x)
plot(x,type = "l")
plot(y,type = "l")
plot(y,x,type = "l")
y = arima.sim(n = 100,model = list(ar =0.9))
plot.ts(y)
y = arima.sim(n = 100,model = list(ar =0.9))
plot.ts(y)
y = arima.sim(n = 100,model = list(ar =0.5))
y = diffinv(y)
plot.ts(y)
y = rnorm(n = 100,mean = a*x + b + e,sd = 3)
y = y+ 2*(1:100)
plot(y)
plot.ts(y)
library(bayesforecast)
md1 = stan_garch(ts = diff(ipc),arma = c(1,1),order = c(1,1,1))
md1
autoplot(md1)
md2 = stan_sarima(ts =diff(ipc),order = c(1,0,1))
autoplot(md2)
check_residuals(md1)
check_residuals(md2)
summary(residuals(md1))
summary(residuals(md2))
md1 = stan_garch(ts = diff(ipc),arma = c(1,1),order = c(1,1,1),genT = TRUE)
autoplot(md1)
md1 = stan_garch(ts = diff(ipc),arma = c(1,1),order = c(1,1,1))
autoplot(md1)
md2 = stan_garch(ts = diff(ipc),arma = c(1,1),order = c(1,1,1))
autoplot(md1)
autoplot(md2)
autoplot(md1)\
autoplot(md1)
md3 = stan_garch(ts = diff(ipc),arma = c(1,1),order = c(0,0,0),genT = TRUE)
autoplot(md3)
autoplot(md1)
array(dim = 0)
y = array(dim = 0)
y
length(NULL)
3000/80
37.5*20*14
37.5*4*14
load("/Users/asael_am/Documents/Gasto Turismo/Gasto.Rdata")
View(EGPV2016)
2/5/2022 - 4/11/2022
122*24.5
(0.4^5)*(0.6)
(0.4^4)*(0.6)
45/60
15/60
0.12 - 0.13
(0.12 - 0.13)/0.005
(0.14 - 0.13)/0.005
1 - 0.9772
0.9772 - 0.0228
0.9544^4
1 - 0.8413
setwd("/Users/asael_am/Downloads/datos dos metodos/datos hamilton")
mu <- read.csv("~/Downloads/datos dos metodos/datos hamilton/mu_hamilto.csv")
View(mu)
sigma <- read.csv("~/Downloads/datos dos metodos/datos hamilton/sigma_hamilto.csv")
View(sigma)
x = read.csv("~/Downloads/datos dos metodos/datos hamilton/xi_hamilto.csv")
View(x)
dat = data.frame(mu = mu[,2],sigma = sigma[,2],x = x[,2])
View(dat)
library(posterior)
library(bayesplot)
library(posterior)
library(posterior)
library(bayesplot)
mu = read.csv("~/Downloads/datos dos metodos/datos hamilton/mu_hamilto.csv")
sigma = read.csv("~/Downloads/datos dos metodos/datos hamilton/sigma_hamilto.csv")
x = read.csv("~/Downloads/datos dos metodos/datos hamilton/xi_hamilto.csv")
dat = draws_df(mu = mu[,2],sigma = sigma[,2],x = x[,2])
dat
summarise_draws(dat)
mcmc_combo(dat)
##Burn-in
dat1 = dat[-1:1000,]
dat = draws_df(mu = mu[,2],sigma = sigma[,2],x = x[,2])
##Burn-in
dat1 = subset_draws(x, iteration = 1:1000)
dat = draws_df(mu = mu[,2],sigma = sigma[,2],x = x[,2])
##Burn-in
dat1 = subset_draws(x, iteration = 1:1000)
dat = draws(mu = mu[,2],sigma = sigma[,2],x = x[,2])
library(posterior)
library(bayesplot)
mu = read.csv("~/Downloads/datos dos metodos/datos hamilton/mu_hamilto.csv")
sigma = read.csv("~/Downloads/datos dos metodos/datos hamilton/sigma_hamilto.csv")
x = read.csv("~/Downloads/datos dos metodos/datos hamilton/xi_hamilto.csv")
dat = draws_df(mu = mu[,2],sigma = sigma[,2],x = x[,2])
##Burn-in
dat1 = subset_draws(dat, iteration = 1:1000)
# Tabla resumen
summarise_draws(dat1)
dat1
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration = 1:2000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration = 1:4000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration = 1:5000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration = 1:9000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration = 1:10000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
##Burn-in
dat1 = subset_draws(dat, iteration =1000:18000)
# Tabla resumen
summarise_draws(dat1)
# Grafico
mcmc_combo(dat1)
library(xtable)
# Tabla resumen
xtable(summarise_draws(dat1))
50/20
2 + (1/2) + (1/6)
8/3
8/(3*exp(1))
x = 8/(3*exp(1))
1-x
combn(9,2)*(.4^3)*(0.6^7)
choose(9,2)
choose(9,2)*(.4^3)*(0.6^7)
dnbinom(x = 10,size = 3,prob = 0.4)
dbinom(10,15,0.2)
dbinom(10:15,15,0.2)
rounddbinom(10:15,15,0.2),3)
roundd(binom(10:15,15,0.2),3)
round(dbinom(10:15,15,0.2),3)
round(dbinom(10:15,15,0.2),4)
round(dbinom(10:15,15,0.2),5)
dbinom(11,15,0.2)
pbinom(11,15,0.2,lower.tail = FALSE)
sum(dbinom(10:15,15,0.2))
